<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flora Wenyao Jiang</title>
    <link>https://ffflora.cat/</link>
    <description>Recent content on Flora Wenyao Jiang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 09 Jan 2022 23:03:46 -0800</lastBuildDate>
    
	<atom:link href="https://ffflora.cat/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Parachute</title>
      <link>https://ffflora.cat/posts/2022/01/parachute/</link>
      <pubDate>Sun, 09 Jan 2022 23:03:46 -0800</pubDate>
      
      <guid>https://ffflora.cat/posts/2022/01/parachute/</guid>
      <description>This blog post consists of the notes and summary from the book called What Color is Your Parachute?
Chapter 2 Cover letter - make it personal and specific to the job you are applying for.
Chapter 3 You are not as powerless as you think. If you&amp;rsquo;re currently out of work, and looking for a job, you have every reason in the world to think you are up against overwhelming forces and the situation you face is rather hopeless.</description>
    </item>
    
    <item>
      <title>SQL Notes (3)</title>
      <link>https://ffflora.cat/posts/2021/12/sql-notes-3/</link>
      <pubDate>Mon, 06 Dec 2021 21:43:17 -0800</pubDate>
      
      <guid>https://ffflora.cat/posts/2021/12/sql-notes-3/</guid>
      <description>Smart Table Design Here are some very broad steps for creating new tables:  Pick the one thing you want your table to describe. Make a list of the information you need to know about that one thing when you are using the table. Using the list, break down the information about your thing into pieces you can use for organizing your table.  And here are some rules of atomic data, which should be the most important part of your table.</description>
    </item>
    
    <item>
      <title>LeetCode - Constantly Updating </title>
      <link>https://ffflora.cat/posts/2021/11/leetcode-constantly-updating/</link>
      <pubDate>Mon, 08 Nov 2021 19:41:07 -0800</pubDate>
      
      <guid>https://ffflora.cat/posts/2021/11/leetcode-constantly-updating/</guid>
      <description></description>
    </item>
    
    <item>
      <title>AWS Machine Learning Specialty Cheatsheet(4)</title>
      <link>https://ffflora.cat/posts/2021/11/aws-machine-learning-specialty-cheatsheet4/</link>
      <pubDate>Wed, 03 Nov 2021 14:47:21 -0700</pubDate>
      
      <guid>https://ffflora.cat/posts/2021/11/aws-machine-learning-specialty-cheatsheet4/</guid>
      <description>ML Implementation and Operation   Inference Pipeline can be considered as an Amazon SageMaker model that you can use to make either real-time predictions or to process batch transforms directly without any external preprocessing.
  You can use Inference Pipeline to package Spark and scikit-learn based preprocessors into containers:
https://docs.aws.amazon.com/sagemaker/latest/dg/inference-pipeline-mleap-scikit-learn-containers.html
  An inference pipeline is a Amazon SageMaker model that is composed of a linear sequence of two to fifteen containers that process requests for inferences on data.</description>
    </item>
    
    <item>
      <title>AWS Machine Learning Specialty Cheatsheet(3)</title>
      <link>https://ffflora.cat/posts/2021/11/aws-machine-learning-specialty-cheatsheet3/</link>
      <pubDate>Wed, 03 Nov 2021 14:47:15 -0700</pubDate>
      
      <guid>https://ffflora.cat/posts/2021/11/aws-machine-learning-specialty-cheatsheet3/</guid>
      <description>Modeling   Object2Vec can be used to find semantically similar objects such as questions. BlazingText Word2Vec can only find semantically similar words.
  mode is the mandatory hyperparameter for both the Word2Vec (unsupervised) and Text Classification (supervised) modes of the SageMaker BlazingText algorithm.
  Incremental Training in Amazon SageMaker
Over time, you might find that a model generates inference that are not as good as they were in the past.</description>
    </item>
    
    <item>
      <title>AWS Machine Learning Specialty Cheatsheet(2)</title>
      <link>https://ffflora.cat/posts/2021/11/aws-machine-learning-specialty-cheatsheet2/</link>
      <pubDate>Wed, 03 Nov 2021 14:34:57 -0700</pubDate>
      
      <guid>https://ffflora.cat/posts/2021/11/aws-machine-learning-specialty-cheatsheet2/</guid>
      <description>Exploratory Data Analysis   In case of a binary classification model with strongly unbalanced classes, we need to over-sample from the minority class, collect more training data for the minority class and create more samples using algorithms such as SMOTE which effectively uses a k-nearest neighbours approach to exclude members of the majority class while in a similar way creating synthetic examples of a minority class. Over-sampling from the positive class or collecting more training data for the positive class would further aggravate the situation.</description>
    </item>
    
    <item>
      <title>AWS Machine Learning Specialty Cheatsheet(1)</title>
      <link>https://ffflora.cat/posts/2021/04/aws-machine-learning-specialty-cheatsheet1/</link>
      <pubDate>Tue, 13 Apr 2021 23:26:49 -0700</pubDate>
      
      <guid>https://ffflora.cat/posts/2021/04/aws-machine-learning-specialty-cheatsheet1/</guid>
      <description>Data Engineering   In Kinesis Data Stream, number_of_shards = max (incoming_write_bandwidth_in_KB/1000, outgoing_read_bandwidth_in_KB/2000)
where
incoming_write_bandwidth_in_KB = average_data_size_in_KB multiplied by the number_of_records_per_seconds.
outgoing_read_bandwidth_in_KB = incoming_write_bandwidth_in_KB multiplied by the number_of_consumers.
  Glue cannotwrite the output in RecordIO-Protobuf format. Lambda is not suited for long-running processes such as the task of transforming 1TB data into RecordIO-Protobuf format. Kinesis Firehose is not meant to be used for batch processing use cases and it cannot write data in RecorIO-Protobuf format.</description>
    </item>
    
    <item>
      <title>React.js Problem Solving Notes </title>
      <link>https://ffflora.cat/posts/2021/03/react.js-problem-solving-notes/</link>
      <pubDate>Wed, 24 Mar 2021 00:08:29 -0700</pubDate>
      
      <guid>https://ffflora.cat/posts/2021/03/react.js-problem-solving-notes/</guid>
      <description>This series of posts summaries the problems/issues I met during work, and the solutions of how I solved these problems.
  How do I parse a .json data file to pass into this DevExtreme component and render out a series of area charts?
Data looks like:
type Data = { period_index: number, breakdown: { sessions: number, conversions: number, avg_page_views: number, avg_time_on_page: number, new_users: number, } }[] parseData = (data: Data | any) =&amp;gt; { if (data.</description>
    </item>
    
    <item>
      <title>AWS SageMaker Deep Dive</title>
      <link>https://ffflora.cat/posts/2021/02/aws-sagemaker-deep-dive/</link>
      <pubDate>Sat, 06 Feb 2021 17:02:04 -0800</pubDate>
      
      <guid>https://ffflora.cat/posts/2021/02/aws-sagemaker-deep-dive/</guid>
      <description>This post consist of the notes that are based on the series of AWS SageMaker videos provided by Amazon Web Services Amazon SageMaker Technical Deep Dive Series.
Fully-Managed Notebook Instances with Amazon SageMaker Create your Notebook Instance:
 Pick the right family:  t - tiny &amp;lt; m, c - computed optimized, p - GPU   Pick the right size:  From medium to very very large.   Pick the right version:  ml.</description>
    </item>
    
    <item>
      <title>AWS Machine Learning Specialty Prep List</title>
      <link>https://ffflora.cat/posts/2021/01/aws-machine-learning-specialty-prep-list/</link>
      <pubDate>Sun, 31 Jan 2021 19:29:26 -0800</pubDate>
      
      <guid>https://ffflora.cat/posts/2021/01/aws-machine-learning-specialty-prep-list/</guid>
      <description>Here are some resources I collected for better preparing the AWS Machine Learning Specialty Exam.
Practical experience aws/amazon-sagemaker-examples
Object Detection with Amazon Sagemaker
AWS Training offers digital courses on machine learning (ML).   Data Analytics Fundamentals
  Exam Readiness: AWS Certified Machine Learning - Specialty
  Deep Learning on AWS
  Elements of Data Science
  Math for Machine Learning
  Linear and Logistic Regression</description>
    </item>
    
    <item>
      <title>AWS Machine Learning Exam Readiness with Sample Questions</title>
      <link>https://ffflora.cat/posts/2021/01/aws-machine-learning-exam-readiness-with-sample-questions/</link>
      <pubDate>Sat, 30 Jan 2021 00:20:32 -0800</pubDate>
      
      <guid>https://ffflora.cat/posts/2021/01/aws-machine-learning-exam-readiness-with-sample-questions/</guid>
      <description>These are my study notes directly from AWS Training cource - AWS Machine Learning Exam Readiness.
Domain 1: Data Engineering Create Data Repo for Machine Learning Identify and implement a data ingestion solution To use the data for ML, you need to ingest it into a service like Amazon S3
Batch and stream processing are two kinds of data ingestion.
Batch processing Batch processing periodically collects and groups source data.With batch processing, the ingestion layer periodically collects and groups source data and sends it to a destination like Amazon S3.</description>
    </item>
    
    <item>
      <title>Intro to Data Analytics Fundamental with AWS Solutions</title>
      <link>https://ffflora.cat/posts/2021/01/intro-to-data-analytics-fundamental-with-aws-solutions/</link>
      <pubDate>Thu, 14 Jan 2021 00:19:31 -0800</pubDate>
      
      <guid>https://ffflora.cat/posts/2021/01/intro-to-data-analytics-fundamental-with-aws-solutions/</guid>
      <description>The challenges identified in many data analysis solutions can be summarized by five key challenges: volume, velocity, variety, veracity, and value.
Volume - Data Storage  Structured(10%) data is organized and stored in the form of values that are grouped into rows and columns of a table. Semistructured(10%) data is often stored in a series of key-value pairs that are grouped into elements within a file. Unstructured(80%) data is not structured in a consistent way.</description>
    </item>
    
    <item>
      <title>SQL Notes (2)</title>
      <link>https://ffflora.cat/posts/2020/05/sql-notes-2/</link>
      <pubDate>Sun, 24 May 2020 00:00:43 -0700</pubDate>
      
      <guid>https://ffflora.cat/posts/2020/05/sql-notes-2/</guid>
      <description>SELECT SELECT DISTINCT vend_id FROM Vendors LIMIT 5; LIMIT 5 OFFSET 5; // return 5 results start from line 5 ORDER BY  This should be the last clause after the SELECT statement. It is legal to ORDER BY the columns that are not being selected. Default is ordering from A - Z, if descending, need to add DESC in the end. DESC only works on col name that listed in front.</description>
    </item>
    
    <item>
      <title>SQL Notes (1)</title>
      <link>https://ffflora.cat/posts/2020/05/sql-notes-1/</link>
      <pubDate>Mon, 04 May 2020 00:10:29 -0700</pubDate>
      
      <guid>https://ffflora.cat/posts/2020/05/sql-notes-1/</guid>
      <description>Useful Commands DESCRIBE: to look at how the table is constructed. This shows if a column is a primary key and what type of data is being srored in each column.
Database level： A. representation of all the structures, such as tables and colimns, in your database, along with how they connect, is known as schema.
CREATE DATABASE test; DROP DATABASE test; SHOW DATABASE; -- show all the databases USE test; -- use some specific database In a Database: The foreign key is a column in a table that reference the primary key of another table.</description>
    </item>
    
    <item>
      <title>React.js Notes (3)</title>
      <link>https://ffflora.cat/posts/2020/03/react.js-notes-3/</link>
      <pubDate>Wed, 04 Mar 2020 00:08:29 -0700</pubDate>
      
      <guid>https://ffflora.cat/posts/2020/03/react.js-notes-3/</guid>
      <description>Components Components Communicate with Server It&amp;rsquo;s safe that the communication happens in the componentDidMount, since this moment the component has already been loaded, and the DOM has been rendered. It is recommended by React.
Reasons:
 componentDidMount中执行服务器通信可以保证获取到数据时，组件已经处于挂载状态，这时即使要直接操作DOM也是安全的，而componentWillMount无法保证这一点。 当组件在服务器端渲染时，componentWillMount会被调用两次，一次是在服务器端，另一次是在浏览器端，而componentDidMount能保证在任何情况下只会被调用一次，从而不会发送多余的数据请求。  class UserListContainer extends from React.Component{ //// 	componentWillMount(){ var that = this; fetch(&amp;#39;/path/to/user-api&amp;#39;) .then(response=&amp;gt;{ response.json().then(data=&amp;gt;{ that.setState({users:data}) }); }); } } Components Update from Server componentWillReceiveProps非常适合做这个工作。假设UserListContainer在获取用户列表时还需要一个参数category，用来根据用户的职业做筛选，category这个参数是从props中获取的，实现代码如下：
class UserListContainer extends from React.Component{ //// 	componentWillReceiveProps(nextProps){ if(nextProps.</description>
    </item>
    
    <item>
      <title>React.js Notes (2)</title>
      <link>https://ffflora.cat/posts/2020/01/react.js-notes-2/</link>
      <pubDate>Tue, 28 Jan 2020 00:08:29 -0700</pubDate>
      
      <guid>https://ffflora.cat/posts/2020/01/react.js-notes-2/</guid>
      <description>Handling Events When you define a component using an ES6 class, a common pattern is for an event handler to be a method on the class. For example, this Toggle component renders a button that lets the user toggle between “ON” and “OFF” states:
class Toggle extends React.Component { constructor(props) { super(props); this.state = {isToggleOn: true}; // This binding is necessary to make `this` work in the callback  this.handleClick = this.</description>
    </item>
    
    <item>
      <title>React.js Notes (1)</title>
      <link>https://ffflora.cat/posts/2020/01/react.js-notes-1/</link>
      <pubDate>Mon, 27 Jan 2020 00:08:29 -0700</pubDate>
      
      <guid>https://ffflora.cat/posts/2020/01/react.js-notes-1/</guid>
      <description>Basics of React (Most of the materials come from React Official Document) JSX Represents Objects Babel compiles JSX down to React.createElement() calls.
These two examples are identical:
const element = ( &amp;lt;h1 className=&amp;#34;greeting&amp;#34;&amp;gt; Hello, world! &amp;lt;/h1&amp;gt; ); const element = React.createElement( &amp;#39;h1&amp;#39;, {className: &amp;#39;greeting&amp;#39;}, &amp;#39;Hello, world!&amp;#39; ); React.createElement() performs a few checks to help you write bug-free code but essentially it creates an object like this:
// Note: this structure is simplified const element = { type: &amp;#39;h1&amp;#39;, props: { className: &amp;#39;greeting&amp;#39;, children: &amp;#39;Hello, world!</description>
    </item>
    
    <item>
      <title>How to Use Auto Completion in GCP</title>
      <link>https://ffflora.cat/posts/2019/08/how-to-use-auto-completion-in-gcp/</link>
      <pubDate>Wed, 28 Aug 2019 21:30:55 -0700</pubDate>
      
      <guid>https://ffflora.cat/posts/2019/08/how-to-use-auto-completion-in-gcp/</guid>
      <description>Auto-completion gcloud interactive has auto prompting for commands and flags, and displays inline help snippets in the lower section as the command is typed.
Static information, like command and sub-command names, and flag names and enumerated flag values, are auto-completed using dropdown menus.
Install the beta components:
gcloud components install beta Enter the gcloud interactive mode:
gcloud beta interactive When using the interactive mode, click on the Tab key to complete file path and resource arguments.</description>
    </item>
    
  </channel>
</rss>