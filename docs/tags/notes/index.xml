<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on Flora Wenyao Jiang</title>
    <link>https://ffflora.cat/tags/notes/</link>
    <description>Recent content in Notes on Flora Wenyao Jiang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 22 May 2022 08:17:26 -0700</lastBuildDate>
    
	<atom:link href="https://ffflora.cat/tags/notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Design of Everyday Things - Notes</title>
      <link>https://ffflora.cat/cn/design/</link>
      <pubDate>Sun, 22 May 2022 08:17:26 -0700</pubDate>
      
      <guid>https://ffflora.cat/cn/design/</guid>
      <description>《设计心理学1：日常的设计（增订版）》 唐纳德·A·诺曼
2002年版序  设计中的弊端导致了错误的发生。
 第一章 日用品中的设计问题 日常生活中的烦恼  以上例子说明了设计中的一项重要原则：可视性。正确的操作部位必须显而易见，而且还要向用户传达出正确的信息。
  可视性问题的其他表现形式是关于用户操作意图和可能的操作方法之间的匹配。
  可视性要表现的就是操作意图和实际操作之间的匹配，并且要让用户看出物品之间的关键差异。
 易理解性和易使用性的设计原则  现在我们来探讨设计的两个基本原则：1.提供一个好的概念模型；2.可视性。
  设计模型是指设计人员所使用的概念模型，用户模型是指用户在与系统交互作用的过程中形成的概念模型。系统表象基于系统的物理结构（包括用户使用手册和各种标示）。设计人员希望用户模型与设计模型完全一样，但问题是，设计人员无法与用户直接交流，必须通过系统表象这一渠道。如果系统表象不能清晰、准确地反映出设计模型，用户就会在使用过程中，建立错误的概念模型。
  每个控制器都有适当的位置，一个控制器负责一项功能，这是多么好的设计原则。当然，这个原则说起来容易做起来难。不过这是一条基本的自然匹配原则：应当让用户清楚地看到控制器和操作方法之间的关系。要做到自然匹配不容易，但这对设计来说却非常关键。
  反馈是控制科学和信息理论中一个常用的概念，其含义为：向用户提供信息，使用户知道某一操作是否已经完成以及操作所产生的结果。
  贝尔电话实验室的设计人员在反馈原则上花费了很多心思，使用户接触电话上的按键时会有一种特殊的感觉。按下一个键时，用户就会听到某种声音，以确定刚才的按键方法是否正确。一旦电话被接通，就会听到喀嚓声或其他声音，使用者就能知道电话的工作状态。说话人的声音也能适度地反馈到听筒，从而帮助他调整自己的音量。
 第二章 日常操作心理学 日常生活中的错误观念  人类习惯于对外界事物加以解释
  我们习惯对事物加以解释，这就形成了针对事物作用方式、事件发生过程和人类行为方式的概念模型，即心理模型。这类心理模型有助于我们理解自己的经历，预测我们的行为结果，应对出乎意料的情况。我们拥有什么样的心理模型取决于我们的知识结构，而不论这些知识是真实的还是想像中的，是粗浅的还是精深的。
  心理模型经常是根据零碎的事实构建而成的，对事实的来龙去脉只有一种肤浅的理解，并依据某种通俗心理学，形成对事物起因、机制和相互关系等各个因素的看法，而这些因素或许并不存在。一些错误的模型会导致人们在日常生活中受挫.
  并非只有某些人才会形成错误的观念，人人都在用心理模型来解释它们所观察到的一切。
 找错怪罪对象  习得的无助感（learned helplessness）可用来解释人们的自责心理。**它是指人们在做某事时多次经历失败，便认为自己实在无法做好这件事，结果陷入无助的状态，不再进行尝试。**若是经常遇到这种情况，人们就会产生严重的心理障碍。习得的无助感发展到极限，会导致忧郁症，使人无法过日常生活。
 第三章 头脑中的知识与外界知识  人们依靠着两种类型的知识：陈述性知识（declarative knowledge）和程序性知识（procedural knowledge）。前者包括各类事实和规则。
  不需要高度精确的知识 - 人们通常不需要非常精确地记忆某些信息
 第四章 知道要做什么 ◆ 可视性和反馈</description>
    </item>
    
    <item>
      <title>Invest For Good - Reading Notes</title>
      <link>https://ffflora.cat/cn/invest_for_good/</link>
      <pubDate>Sat, 14 May 2022 12:05:46 -0700</pubDate>
      
      <guid>https://ffflora.cat/cn/invest_for_good/</guid>
      <description>《ESG投资》- Invest for Good Intro ESG投资目前主要是在欧洲市场，主要手段仍是负面筛选，即将未通过ESG测试的公司从投资组合中剔除。然而，作者们认为，只有将ESG投资与积极投资结合起来并将其推广到新兴市场，ESG投资对管理和公司治理的影响才能发挥最大的作用，进而使ESG投资的正面效用最大化。
“积极”在投资中意味着参与投资组合中的公司事务，而不是被动地跟踪指数。
据估计，亚洲仅有不到50%的公司披露了碳排放数据，而在欧洲这一比例是90%。在透明国际建立的国际清廉指数（CPI）排行榜上，除去个别例外情况，新兴市场国家的排名往往低于成熟市场。</description>
    </item>
    
    <item>
      <title>Environmental Related Glossary</title>
      <link>https://ffflora.cat/cn/env/</link>
      <pubDate>Wed, 11 May 2022 12:59:53 -0700</pubDate>
      
      <guid>https://ffflora.cat/cn/env/</guid>
      <description>A - N Active Investment: 积极投资
CSR - Corporate Social Responsibility（企业社会责任）: self-regulating business model that helps a company be socially accountable to itself, its stakeholders, and the public.
Exclusionary Screening: 负面筛选。筛选详细解释
Emerging market: 新兴市场
Mature Market: 成熟市场
O - Z Peak carbon dioxide emissions 碳达峰
 2021年中国消费行业ESG发展研究报告</description>
    </item>
    
    <item>
      <title>What Color Is Your Parachute?</title>
      <link>https://ffflora.cat/posts/2022/01/what-color-is-your-parachute/</link>
      <pubDate>Sun, 09 Jan 2022 23:03:46 -0800</pubDate>
      
      <guid>https://ffflora.cat/posts/2022/01/what-color-is-your-parachute/</guid>
      <description>This blog post consists of the notes and summary from the book called What Color is Your Parachute?
Chapter 2 Cover letter - make it personal and specific to the job you are applying for.
Chapter 3 You are not as powerless as you think. If you&amp;rsquo;re currently out of work, and looking for a job, you have every reason in the world to think you are up against overwhelming forces and the situation you face is rather hopeless.</description>
    </item>
    
    <item>
      <title>SQL Notes (3)</title>
      <link>https://ffflora.cat/posts/2021/12/sql-notes-3/</link>
      <pubDate>Mon, 06 Dec 2021 21:43:17 -0800</pubDate>
      
      <guid>https://ffflora.cat/posts/2021/12/sql-notes-3/</guid>
      <description>Smart Table Design Here are some very broad steps for creating new tables:  Pick the one thing you want your table to describe. Make a list of the information you need to know about that one thing when you are using the table. Using the list, break down the information about your thing into pieces you can use for organizing your table.  And here are some rules of atomic data, which should be the most important part of your table.</description>
    </item>
    
    <item>
      <title>React.js Problem Solving Notes </title>
      <link>https://ffflora.cat/posts/2021/03/react.js-problem-solving-notes/</link>
      <pubDate>Wed, 24 Mar 2021 00:08:29 -0700</pubDate>
      
      <guid>https://ffflora.cat/posts/2021/03/react.js-problem-solving-notes/</guid>
      <description>This series of posts summaries the problems/issues I met during work, and the solutions of how I solved these problems.
  How do I parse a .json data file to pass into this DevExtreme component and render out a series of area charts?
Data looks like:
type Data = { period_index: number, breakdown: { sessions: number, conversions: number, avg_page_views: number, avg_time_on_page: number, new_users: number, } }[] parseData = (data: Data | any) =&amp;gt; { if (data.</description>
    </item>
    
    <item>
      <title>SQL Notes (2)</title>
      <link>https://ffflora.cat/posts/2020/05/sql-notes-2/</link>
      <pubDate>Sun, 24 May 2020 00:00:43 -0700</pubDate>
      
      <guid>https://ffflora.cat/posts/2020/05/sql-notes-2/</guid>
      <description>SELECT SELECT DISTINCT vend_id FROM Vendors LIMIT 5; LIMIT 5 OFFSET 5; // return 5 results start from line 5 ORDER BY  This should be the last clause after the SELECT statement. It is legal to ORDER BY the columns that are not being selected. Default is ordering from A - Z, if descending, need to add DESC in the end. DESC only works on col name that listed in front.</description>
    </item>
    
    <item>
      <title>SQL Notes (1)</title>
      <link>https://ffflora.cat/posts/2020/05/sql-notes-1/</link>
      <pubDate>Mon, 04 May 2020 00:10:29 -0700</pubDate>
      
      <guid>https://ffflora.cat/posts/2020/05/sql-notes-1/</guid>
      <description>Useful Commands DESCRIBE: to look at how the table is constructed. This shows if a column is a primary key and what type of data is being srored in each column.
Database level： A. representation of all the structures, such as tables and colimns, in your database, along with how they connect, is known as schema.
CREATE DATABASE test; DROP DATABASE test; SHOW DATABASE; -- show all the databases USE test; -- use some specific database In a Database: The foreign key is a column in a table that reference the primary key of another table.</description>
    </item>
    
    <item>
      <title>React.js Notes (3)</title>
      <link>https://ffflora.cat/posts/2020/03/react.js-notes-3/</link>
      <pubDate>Wed, 04 Mar 2020 00:08:29 -0700</pubDate>
      
      <guid>https://ffflora.cat/posts/2020/03/react.js-notes-3/</guid>
      <description>Components Components Communicate with Server It&amp;rsquo;s safe that the communication happens in the componentDidMount, since this moment the component has already been loaded, and the DOM has been rendered. It is recommended by React.
Reasons:
 componentDidMount中执行服务器通信可以保证获取到数据时，组件已经处于挂载状态，这时即使要直接操作DOM也是安全的，而componentWillMount无法保证这一点。 当组件在服务器端渲染时，componentWillMount会被调用两次，一次是在服务器端，另一次是在浏览器端，而componentDidMount能保证在任何情况下只会被调用一次，从而不会发送多余的数据请求。  class UserListContainer extends from React.Component{ //// 	componentWillMount(){ var that = this; fetch(&amp;#39;/path/to/user-api&amp;#39;) .then(response=&amp;gt;{ response.json().then(data=&amp;gt;{ that.setState({users:data}) }); }); } } Components Update from Server componentWillReceiveProps非常适合做这个工作。假设UserListContainer在获取用户列表时还需要一个参数category，用来根据用户的职业做筛选，category这个参数是从props中获取的，实现代码如下：
class UserListContainer extends from React.Component{ //// 	componentWillReceiveProps(nextProps){ if(nextProps.</description>
    </item>
    
    <item>
      <title>React.js Notes (2)</title>
      <link>https://ffflora.cat/posts/2020/01/react.js-notes-2/</link>
      <pubDate>Tue, 28 Jan 2020 00:08:29 -0700</pubDate>
      
      <guid>https://ffflora.cat/posts/2020/01/react.js-notes-2/</guid>
      <description>Handling Events When you define a component using an ES6 class, a common pattern is for an event handler to be a method on the class. For example, this Toggle component renders a button that lets the user toggle between “ON” and “OFF” states:
class Toggle extends React.Component { constructor(props) { super(props); this.state = {isToggleOn: true}; // This binding is necessary to make `this` work in the callback  this.handleClick = this.</description>
    </item>
    
    <item>
      <title>React.js Notes (1)</title>
      <link>https://ffflora.cat/posts/2020/01/react.js-notes-1/</link>
      <pubDate>Mon, 27 Jan 2020 00:08:29 -0700</pubDate>
      
      <guid>https://ffflora.cat/posts/2020/01/react.js-notes-1/</guid>
      <description>Basics of React (Most of the materials come from React Official Document) JSX Represents Objects Babel compiles JSX down to React.createElement() calls.
These two examples are identical:
const element = ( &amp;lt;h1 className=&amp;#34;greeting&amp;#34;&amp;gt; Hello, world! &amp;lt;/h1&amp;gt; ); const element = React.createElement( &amp;#39;h1&amp;#39;, {className: &amp;#39;greeting&amp;#39;}, &amp;#39;Hello, world!&amp;#39; ); React.createElement() performs a few checks to help you write bug-free code but essentially it creates an object like this:
// Note: this structure is simplified const element = { type: &amp;#39;h1&amp;#39;, props: { className: &amp;#39;greeting&amp;#39;, children: &amp;#39;Hello, world!</description>
    </item>
    
  </channel>
</rss>